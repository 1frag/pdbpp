.. -*- restructuredtext -*-

pdb++: debugging has never been so funny
========================================

What is it?
------------

This module is an extension of the pdb_ module of the standard library.  It is
meant to be fully compatible with its predecessor, yet it introduces a number
of new features to make your debugging experience as nice as possible.

``pdb++`` features include:

  - colorful TAB completion of Python expressions (through fancycompleter_)

  - optional syntax highlighting of code listings (through pygments_)

  - `sticky mode`_

  - several new commands to be used from the interactive ``(Pdb++)`` prompt

  - additional convenience functions in the ``pdb`` module, to be used from
    your program

  - user friendlier user interface (hint: have you ever typed ``r`` at the
    prompt to print the value of some variable?)


Installation
-------------

Unfortunately, ``pdb++`` is not a valid identifier for ``pip`` and
``easy_install``, so you have to install ``pdbpp`` instead::

    $ pip install pdbpp

Note that the Python name of the module is ``pdb``. The intention is to
transparently substitute the ``pdb`` module in the standard library: this way,
every program and library which calls ``pdb`` will automatically use ``pdb++``
(e.g., ``py.test --pdb``).

The old ``pdb`` module is still available by doing e.g. ``import pdb;
pdb.pdb.set_trace()``

New interactive commands
------------------------

The following are new commands that you can use from the interative
``(Pdb++)`` prompt.

sticky
~~~~~~

``sticky [start end]``: toggle **sticky mode**. When in this mode, every time
the current position change, the screen is repainted and the whole function
shown.  Thus, when doing step-by-step execution you can easily follow the flow
of the execution.

If ``start`` and ``end`` are given, sticky mode is enabled and only lines
within that range (extremes included) will be displayed.


longlist (ll)
~~~~~~~~~~~~~

List source code for the current function.

Differently than the normal pdb ``list`` command, ``longlist`` displays the
whole function.  The current line is marked with ``->``.  In case of
post-mortem debugging, the line which effectively raised the exception is
marked with ``>>``.

If the ``highlight`` `config option`_ is set and pygments_ is installed, the
source code is highlighted.

interact
~~~~~~~~

Start an interative interpreter whose global namespace contains all the names
found in the current scope.

track
~~~~~

``track EXPRESSION``: display a graph showing which objects are referred by
the value of the expression.  This command requires the ``pypy`` source code
to be importable.

watch/unwatch
~~~~~~~~~~~~~

``watch EXPRESSION``: add an expression to the *watching list*; expressions
in this list are evaluated at each step, and printed every time its value
changes.

``unwatch EXPRESSION``: remove ``expression`` from the watching list.

**WARNING**: since the expressions is evaluated multiple time, pay attention
not to put expressions with side-effects in the watching list.

source
~~~~~~

``source EXPRESSION``: show the source code for the given
function/method/class.

edit
~~~~

``edit EXPRESSION``: open the editor in the right position to edit the given
function/method/class.  The editor to use is specified through a `config
option`_.
